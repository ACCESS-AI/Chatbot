/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)

    // Apply the java-library plugin for API and implementation separation.
    `java-library`

    // Apply the maven-publish plugin to publish your library.
    id("maven-publish")

    // Apply the JaCoCo plugin for code coverage
    id("jacoco")
}

group = "ch.uzh.ifi"
version = "1.0.0"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)

    implementation("io.ktor:ktor-client-okhttp:2.3.12")
    implementation("io.ktor:ktor-client-core:2.3.12")
    implementation("io.ktor:ktor-client-cio:2.3.12")
    implementation("io.ktor:ktor-client-json:2.3.12")
    implementation("io.ktor:ktor-client-serialization:2.3.12")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.12")
    implementation("io.ktor:ktor-client-content-negotiation:2.3.12")
    implementation("io.milvus:milvus-sdk-java:2.4.1")
    implementation("dev.langchain4j:langchain4j:0.25.0")
    implementation("dev.langchain4j:langchain4j-ollama:0.25.0")
    implementation("jakarta.persistence:jakarta.persistence-api:3.2.0-M1")
    implementation("org.hibernate:hibernate-core:6.4.2.Final")
    implementation("org.postgresql:postgresql:42.7.1")
    implementation(kotlin("reflect"))

    testImplementation("io.mockk:mockk:1.13.11")
    testImplementation("io.ktor:ktor-client-mock:2.3.12")
}

publishing {
    publications {
        create<MavenPublication>("local") {
            from(components["java"])
            groupId = group as String
            artifactId = "access-chatbot"
            version = version as String
        }
    }

    repositories {
        maven {
            url = uri("${buildDir}/repo")
        }
    }
}


testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("1.9.20")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

// Run tests in parallel
tasks.withType<Test> {
    maxParallelForks = Runtime.getRuntime().availableProcessors()
}

// Configure JaCoCo for code coverage
jacoco {
    toolVersion = "0.8.10"
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

tasks.check {
    dependsOn(tasks.jacocoTestReport)
}